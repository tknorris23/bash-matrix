#!/bin/bash
##########################
#	mtricies babey!!
#	Thomas Kelly Norris
#	CS344
#	1/22/2020
#	this boi be goin
##########################

## Set all global vars
row=0
col=0
rows=0
### valid matrix function goes here

dims() {
	#check if there is a valid number of arguments
	if [ "$#" -ne 1 ];
	then
		echo "Error: Wrong argument count." 1>&2
		exit 1
	fi
	#check if argument 1 is null
	if [ -z "$1" ];
	then
		set -- "$datafilepath"
	fi
	#Check if argument is readable
	if [ ! -r "$1" ];
	then
		echo "Error: Argument is unreadable." 1>&2
		exit 2
	fi
	rows=0
	cols=0
	#while loop iterates each new line of the matrix
	while IFS= read -r line
	do
		#Increment rows value
		rows=`expr $rows + 1`
	done < $1
	#For columns, take the first line and increment cols for each character
	read firstline < $1
	for i in $firstline
	do
		cols=`expr $cols + 1`
	done
	#Print out the result
	echo "$rows $cols" > "temp_result$$"
}

transpose() {
	#check if there is a valid # of arguments
	if [ "$#" -ne 1 ];
	then
		echo "Error: Wrong argument count." 1>&2
		exit 1
	fi
	#check if argument 1 is null
	if [ -z "$1" ];
	then
		set -- "$datafilepath"
	fi
	#check if argument is readable
	if [ ! -r "$1" ];
	then
		echo "Error: Argument is undreadable." 1>&2
		exit 2
	fi
	#Set function vars
	iterator=0
	current_row=0
	cols=0
	rows=0
	col=0
	row=0
	#Get dimensions of matrix
	dims $1
	#Now that we know orignial dimensions, we can infer the new dims
	newcols="$rows"
	newrows="$cols"

	#Extract matrix into ordered temp file, with no formatting
	while IFS= read -r line
	do
		#for each line, go through each character
		for i in $line
		do
			#add value to temp matrix value file
			echo "$i" >> "matrix_order$$"
		done
	done < $1
	
	#Create a file for each row in the matrix
	while IFS= read -r val
	do
		#If current column is less than total # of columns:
		if [ "$col" -lt "$cols" ]
		then
			#Put value into temprow[row#][pid]
			echo -n "$val " >> "temprow${iterator}_$$"
			#Increment current column
			col=`expr $col + 1`
		#Else if current column is equal to total # of columns:
		else
			#Set current column to 1, since this is going to be
			# the first value of a new row file
			# and that's what the math needs it to be
			col=1
			#Increment iterator
			iterator=`expr $iterator + 1`
			#Put value into file, which is a new one since 
			# iterator just changed
			echo -n "$val " >> "temprow${iterator}_$$"
		fi
	done < "matrix_order$$"
	#reset iterator and current column
	iterator=0
	col=0
	#This while loop runs as many times as there are values in the matrix
	#It puts the first value of the first row file in, then the first
	# value of the second row file in, and so on. It's a lot of iteration
	# but hey that's how I got it to happen
	while IFS= read -r val
	do
		#If the current column equals the # of columns in the transposed matrix, the value being added to the matrix gets a newline character instead of a tab
		if [ `expr $col + 1` -eq "$newcols" ]
		then
			#For each element in temprow[current column][pid]
			content=$(<"temprow${col}_$$")
			for i in $content
			do
				#If the iterator is equal to the current row:
				if [ "$iterator" -eq "$current_row" ]
				then
					#Add it's value with a newline to temp_transpose[pid]
					echo "$i" >> "temp_transpose$$"
				fi
				#Increment iterator, implying we're looking at a different row
				iterator=`expr $iterator + 1`
			done
			#once done with for loop, reset iterator
			iterator=0
			#Since this is the end of a row, increment current_row
			current_row=`expr $current_row + 1`
			#Since it's a new row, current column gets reset
			col=0
		#Else, the current column will not be the last one, and the value added to the transposed matrix will get a tab after it
		else
			#For each element in temprow[current column][pid]
			content=$(<"temprow${col}_$$")
			for i in $content
			do
				#If iterator is equal to the current row:
				if [ "$iterator" -eq "$current_row" ]
				then
					#Add value of i to temp_transpose[pid] with a tab instead of a newline
					echo -en "$i\t" >> "temp_transpose$$"
				fi
				#increment iterator
				iterator=`expr $iterator + 1`
			done
			#Done with for loop, reset iterator
			iterator=0
			#Still in current_row, increment current column
			col=`expr $col + 1`
		fi
	done < "matrix_order$$"
	#Copy transposed matrix to result file
	cp "temp_transpose$$" "temp_result$$"
	
	#Remove temp files
	rm "matrix_order$$"
	rm "temp_transpose$$"
	iterator=0
	for ((i=0; i < $rows; i++))
	do
		rm "temprow${iterator}_$$"
		iterator=`expr $iterator + 1`
	done
	iterator=0
	
}

mean() {
	#Mean gives the mean of each column in a matrix. To more easily sum the values in each column, I transpose the matrix and then seperate the transposed matrix's rows into seperate files. Thus I create a seperate file for each column's values.
	#check if argument # is valid
	if [ "$#" -ne 1 ];
	then
		echo "Error: Wrong argument count." 1>&2
		exit 1
	fi
	#Check if argument 1 is null
	if [ -z "$1" ];
	then
		set -- "$datafilepath"
	fi
	#check if argument is unreadable
	if [ ! -r "$1" ];
	then
		echo "Error: Argument is unreadable." 1>&2
		exit 2
	fi
	#Step 1 is to transpose the matrix. The transposed matrix is stored in temp_result[pid].
	transpose $1
	
	#Step 2 is to create a non-delineated file for all of the matrix values.
	while IFS= read -r line
	do
		#For each line, go through each character
		for i in $line
		do
			#Add value to temp matrix value file
			echo "$i" >> "mean_matrix_order$$"
		done
	done < "temp_result$$"

	#Step 3 is to create "column" files from each row, like how it's done in the transpose function.
	#make sure iterator is 0
	iterator=0
	while IFS= read -r val
	do
		#If the current column is less than total # of columns:
		if [ "$col" -lt "$newcols" ]
		then
			#Put value into tempcol[col#][pid]
			echo -n "$val " >> "tempcol${iterator}_$$"
			#Increment current column
			col=`expr $col + 1`
		#Else if current column is equal to total # of columns:
		else
			#Set current column to 1, since it's the first
			# value of a new col file
			col=1
			#Increment iterator
			iterator=`expr $iterator + 1`
			#Put value into file, which is a new one
			echo -n "$val " >> "tempcol${iterator}_$$"
		fi
	done < "mean_matrix_order$$"
	#reset iterator and current column
	iterator=0
	col=0
	
	sum=0
	mean=0
	#Step 4 is to get the mean of each file and add it to mean matrix
	#For each column:
	for ((i=0; i < $cols; i++))
	do
		#Read the contents of the column file
		read line < "tempcol${i}_$$"
		#Sum each value together
		for j in $line
		do
			sum=`expr $sum + $j`
		done
		#Calculate mean
		mean=$(( ($sum + ($newcols/2)*( ($sum>0)*2-1)) / $newcols ))
		#Add mean to mean matrix
		#If it's the last column, put a newline char at the end.
		if [ "$i" -eq `expr $cols - 1` ]
		then
			echo "${mean}" >> "mean_matrix$$"
		#If not the last column, put a tab char at the end.
		else
			echo -en "${mean}\t" >> "mean_matrix$$"
		fi
		#reset sum
		sum=0
	done

	#Step 5 is to set the mean matrix to be the result:
	cp "mean_matrix$$" "temp_result$$"

	#Remove temp files
	rm "mean_matrix$$" "mean_matrix_order$$"
	for ((i=0; i < $cols; i++))
	do
		rm "tempcol${i}_$$"
	done	
}

add() {
	#Check if there is a valid # of arguments
	if [ "$#" -ne 2 ];
	then
		echo "Error: Wrong argument count." 1>&2
		exit 1
	fi
	#Check if arguments are readable
	if [ ! -r "$1" ] || [ ! -r "$2" ];
	then
		echo "Error: An argument is undreadable." 1>&2
		exit 2
	fi
	#Set function vars
	sum=0
	col=0
	row=0
	iterator1=0
	iterator2=0
	#Check that inputs are same dimensions
	dims $1
	read dims1 < "temp_result$$"
	#Reset vars that dims needs
	rows=0
	cols=0
	dims $2
	read dims2 < "temp_result$$"
	if [ "$dims1" == "$dims2" ];
	#If they are, continue with operation
	then
		#Step 1 is to put values of both matricies into ordered value files
		while IFS= read -r line
		do
			#For each line, go through each character
			for i in $line
			do
				#Add value to temp matrix value file
				echo "$i" >> "add1_$$"
			done
		done < $1
		
		#Do the same loop for second matrix
		while IFS= read -r line
		do
			#For each line, go through each character
			for i in $line
			do
				#Add value to temp matrix value file
				echo "$i" >> "add2_$$"
			done
		done < $2

		#Now we do a nested loop of each character in add1, followed by going through each character in add2. If their iterators are equal, their values are added and they get sent to the final ordered value file.
		while IFS= read -r val1
		do
			#each character in second matrix
			while IFS= read -r val2
			do
				#If iterators are equal, add values and send to file
				if [ "$iterator1" -eq "$iterator2" ]
				then
					sum=`expr $val1 + $val2`
					echo "$sum" >> "added$$"
				fi
				#Increment add2's iterator
				iterator2=`expr $iterator2 + 1`
			done < "add2_$$"
			#Increment iterator 1
			iterator1=`expr $iterator1 + 1`
			#Reset iterator 2
			iterator2=0
		done < "add1_$$"

		#Now we have an ordered value file with the added values inside.
		#The next step is to build the added matrix.
		while IFS= read -r val
		do
			#If the current column equals the # of columns in the matrix, the value being added gets a newline instead of a tab
			if [ `expr $col + 1` -eq "$cols" ]
			then
				echo "$val" >> "added_matrix$$"
				#Current column gets set back to 0
				col=0
			#Else, the current column is not the last columm, and gets a tab after the value
			else
				echo -en "$val\t" >> "added_matrix$$"
				#Increment current column
				col=`expr $col + 1`
			fi
		done < "added$$"
		#Copy added matrix to result file
		cp "added_matrix$$" "temp_result$$"

		#Remove temp files
		rm "add1_$$" "add2_$$" "added_matrix$$" "added$$"
	else
		#error return
		return 1
	fi	
}

multiply() {
	#Check if there is a valid number of arguments
	if [ "$#" -ne 2 ];
	then
		echo "Error: Wrong argument count." 1>&2
		exit 1
	fi
	#check if arguments are readable
	if [ ! -r "$1" ] || [ ! -r "$2" ];
	then
		echo "Error: An argument is unreadable." 1>&2
		exit 2
	fi
	col=0
	cols=0
	m=0
	p=0
	iterator=0
	#First step is to make an ordered value file for both matricies
	while IFS= read -r line
	do
		#For each line, go through each character
		for i in $line
		do
			#add value to ordered value file
			echo "$i" >> "ovf1$$"
		done
	done < $1
	
	#For the second matrix we first transpose it
	transpose $2
	while IFS= read -r line
	do
		for i in $line
		do
			echo "$i" >> "ovf2$$"
		done
	done < "temp_result$$"

	#Step 2 is to create row files for the first matrix:
	rows=0
	cols=0
	dims $1
	iterator=0
	while IFS= read -r val
	do
		#If current column is less than total # of columns:
		if [ "$col" -lt "$cols" ]
		then
			#Put value into temprow[row#][pid]
			echo -n "$val " >> "temprow${iterator}_$$"
			#Increment current column
			col=`expr $col + 1`
		#Else if current column is equal to total # of columns:
		else
			#Set current column to 1
			col=1
			#Increment iterator
			iterator=`expr $iterator + 1`
			#Put value into file, which is new because iterator incremented
			echo -n "$val " >> "temprow${iterator}_$$"
		fi
	done < "ovf1$$"
	#reset iterator and current column
	iterator=0
	col=0
	#Step 3 is to create column files for the second matrix:
	while IFS= read -r val
	do
		#If the current column is less than total # of columns:
		if [ "$col" -lt "$newcols" ]
		then
			#Put value into tempcol[col#][pid]
			echo -n "$val " >> "tempcol${iterator}_$$"
			#Increment current column
			col=`expr $col + 1`
		#Else if current column is equal to total # of columns:
		else
			#Set current column to 1
			col=1
			#Increment iterator
			iterator=`expr $iterator + 1`
			#Put value into new file
			echo -n "$val " >> "tempcol${iterator}_$$"
		fi
	done < "ovf2$$"
	#reset iterator and current column
	iterator=0
	col=0

	#Next we set values for some vars needed
	iterator1=0
	iterator2=0
	current_col=0
	current_row=0
	count=0
	#This loop gets the dot product of rows and columns and sends them to an ordered value file.
	#While count is less than the total number of values the multiplied matrix will have:
	while [ "$count" -lt "$rows" ]
	do
		#Get the values from current_row's row file
		read rvals < "temprow${current_row}_$$"
		for ((k=0; k < "$newrows"; k++));
		do
			#Get the values from current_col's col file
			read cvals < "tempcol${current_col}_$$"
			#For each value in the row file
			for i in $rvals
			do
				#For each value in the column file
				for j in $cvals
				do
					#If the iterators are the same:
					if [ "$iterator1" -eq "$iterator2" ]
					then
						#Add the product of i and j to "dot"
						dot=$(( $dot + ( $i * $j ) ))
					fi
				#Increment iterator 2
				iterator2=`expr $iterator2 + 1`
				done
				#Increment iterator 1
				iterator1=`expr $iterator1 + 1`
				#reset iterator 2
				iterator2=0
			done
			#Reset iterator 1
			iterator1=0
			#Increment current column
			current_col=`expr $current_col + 1`
			#Send the value to the ordered value file
			echo "$dot" >> "mult_$$"
			dot=0
		done
		#Increment current row
		current_row=`expr $current_row + 1`
		current_col=0
		count=`expr $count + 1`
	done
	#We now have an ordered value file for the multiplied matrix. Next step is to create the matrix file.
	col=0
	while IFS= read -r val
	do
		if [ `expr $col + 1` -eq "$newrows" ]
		then
			echo "$val" >> "mult_matrix_$$"
			#Current column gets set back to 0
			col=0
		else
			echo -en "$val\t" >> "mult_matrix_$$"
			#Increment current column
			col=`expr $col + 1`
		fi
	done < "mult_$$"
	#Copy to result file
	cp "mult_matrix_$$" "temp_result$$"
	#Remove temp files
	rm "mult_$$" "mult_matrix_$$" "ovf1$$" "ovf2$$"
	for ((i=0; i < $rows; i++))
	do
		rm "temprow${i}_$$"
	done
	for ((i=0; i < $newrows; i++))
	do
		rm "tempcol${i}_$$"
	done
}

datafilepath="datafile$$"
if [ "$#" = "1" ]
then
	cat > "$datafilepath"
elif [ "$#" = "2" ]
then
	datafilepath=$2
fi

$1 "${@:2}"



#Display results
cat "temp_result$$"
#Remove results temp file
rm "temp_result$$"
#Remove data file if it exists
if [ -r "datafile$$" ];
then
	rm "datafile$$"
fi
